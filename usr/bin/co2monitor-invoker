#!/usr/bin/env python3
import sys, os, re
import time
import dbus
import dbus.mainloop.glib
import logging
import signal
from subprocess import Popen, PIPE, check_output
from gi.repository import GLib

logger = logging.getLogger(__name__)

####################
### LIBRARY PATH ###
####################
# add /usr/lib/co2monitor/python to the module paths
sys.path.insert(1,"/usr/lib/co2monitor/python")
import co2monitor.config

################
### LANGUAGE ###
################
co2monitor.config.install_language_globally()

#####################
### CONFIGURATION ###
#####################
config = co2monitor.config.get_configuration()

###############
### LOGGING ###
###############
co2monitor.config.setup_logger_from_config(
    logger  = logger,
    section = 'service-logging',
    config  = config
    )

# define names
CO2MONITOR_BUSNAME    = "de.nobodyinperson.co2monitor"
CO2MONITOR_INTERFACE  = "de.nobodyinperson.co2monitor"
CO2MONITOR_OBJECTPATH = "/de/nobodyinperson/co2monitor"

systembus = dbus.SystemBus() # the system bus

###############################################
### Make sure co2monitor-service is running ###
###############################################
def wait_for_co2monitor_service_on_dbus(seconds=10):
    # check if starting worked out
    signal.alarm(seconds) # give it some seconds to register on dbus
    while not systembus.name_has_owner(CO2MONITOR_BUSNAME):
        timeleft = signal.alarm(0) # get alarm time left
        if timeleft <= 1: # if alarm is nearly reached, stop
            signal.alarm(0) # unset the alarm
            return False
        signal.alarm(timeleft) # continue alarm
        time.sleep(1.1) # has to sleep more than 1 second, because
                        # signal.alarm only returns full seconds
    signal.alarm(0) # unset the alarm
    return True

# def other_invoker_running():
#     psaux = check_output(['ps','-eo','pid,cmd']).decode().split("\n")
#     reg = re.compile("^\s*(?!{pid}).*python3\s+.*co2monitor-invoker".format(pid=os.getpid()))
#     invokers = [ps for ps in psaux if reg.match(ps)]
#     logger.debug(invokers)
#     return len(invokers) > 0

# def wait_for_other_invoker_to_end():
#     while other_invoker_running():
#         time.sleep(0.1)
    
# # make sure to wait for other invokers to end
# if other_invoker_running():
#     logger.debug(_("waiting for other co2monitor-invoker instances to end"))
#     wait_for_other_invoker_to_end()
# else:
#     logger.debug(_("no other co2monitor-invoker instances active"))
    

# check if the co2monitor service is already running
if systembus.name_has_owner(CO2MONITOR_BUSNAME):
    logger.debug(_("co2monitor is already running"))
else:
    logger.debug(_("co2monitor is not running"))
    
    try: # try to start co2monitor via systemd
        logger.info(_("trying to start co2monitor via systemd's dbus interface..."))
        # get systemd dbus object
        systemd = systembus.get_object( "org.freedesktop.systemd1",
                                       "/org/freedesktop/systemd1")
        # get the Manager interface
        systemd_manager  = dbus.Interface(systemd, 
            dbus_interface="org.freedesktop.systemd1.Manager")
        # let the manager start the co2monitor.service unit
        systemd_manager.StartUnit("co2monitor.service","replace")
        logger.debug(_("instructed systemd via dbus to start co2monitor."))
        # check if it worked
        if wait_for_co2monitor_service_on_dbus():
            logger.info(_("co2monitor was successfully started via systemd's dbus interface."))
        else:
            logger.info(_("co2monitor startup took too long via systemd, didn't work."))
            raise Exception() # go into the except path
    except: # systemd starting didn't work
        logger.debug(_("starting co2monitor via systemd's dbus interface didn't work."))
        # last resort: start co2monitor service by hand
        logger.info(_("starting co2monitor via 'at now'..."))
        # open "at now" process
        atnow = Popen(["at","now"],stdin=PIPE,stdout=PIPE,stderr=PIPE)
        # put text into 'at now' command
        atnow.communicate(input = b'/usr/bin/co2monitor-service')

        if wait_for_co2monitor_service_on_dbus():
            logger.info(_("co2monitor successfully started via 'at now'."))
        else:
            logger.info(_("co2monitor startup took too long via 'at now', didn't work."))
            sys.exit() # exit



#########################################
### co2monitor-service is running now ###
#########################################

#############################################
### tell co2monitor-service to log device ###
#############################################

# get DEVNAME environment variable
DEVNAME = os.environ.get('DEVNAME')
if not DEVNAME: # stop if there is no devname environment variable
    logger.critical(_("no DEVNAME environment variable given. Aborting."))
    sys.exit(1)

logger.debug(_("DEVNAME environment variable: {}".format(DEVNAME)))
if not os.path.exists(DEVNAME):
    logger.critical(
        _("DEVNAME environment variable '{}' is a non-existant file.  Aborting."
        ).format(DEVNAME))
    sys.exit(1)
    
# now there is a DEVNAME variable that holds an existant file

# get the co2monitor-service proxy object
co2monitor_service_proxy = systembus.get_object(CO2MONITOR_BUSNAME,
    CO2MONITOR_OBJECTPATH)
# get the interface
co2monitor_service_interface = dbus.Interface(co2monitor_service_proxy,
    CO2MONITOR_INTERFACE)
# start the device logging
co2monitor_service_interface.start_device_logging(DEVNAME)


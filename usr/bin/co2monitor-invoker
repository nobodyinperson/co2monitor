#!/usr/bin/env python3
import sys
import time
import dbus
import dbus.mainloop.glib
import logging
import signal
from subprocess import Popen, PIPE
from gi.repository import GLib

logger = logging.getLogger(__name__)

####################
### LIBRARY PATH ###
####################
# add /usr/lib/co2monitor/python to the module paths
sys.path.insert(1,"/usr/lib/co2monitor/python")
import co2monitor.config

################
### LANGUAGE ###
################
co2monitor.config.install_language_globally()

#####################
### CONFIGURATION ###
#####################
config = co2monitor.config.get_configuration()

###############
### LOGGING ###
###############
co2monitor.config.setup_logger_from_config(
    logger  = logger,
    section = 'service-logging',
    config  = config
    )

# define names
CO2MONITOR_BUSNAME    = "de.nobodyinperson.co2monitor"
CO2MONITOR_INTERFACE  = "de.nobodyinperson.co2monitor"
CO2MONITOR_OBJECTPATH = "/de/nobodyinperson/co2monitor"

systembus = dbus.SystemBus() # the system bus

# check if the co2monitor service is already running
if systembus.name_has_owner(CO2MONITOR_BUSNAME):
    logger.info(_("co2monitor is running"))
else:
    logger.info(_("co2monitor is not running"))
    
    try: # try to start co2monitor via systemd
        logger.info(_("trying to start co2monitor via systemd's dbus interface..."))
        # get systemd dbus object
        systemd = systembus.get_object( "org.freedesktop.systemd1",
                                       "/org/freedesktop/systemd1")
        # get the Manager interface
        systemd_manager  = dbus.Interface(systemd, 
            dbus_interface="org.freedesktop.systemd1.Manager")
        # let the manager start the co2monitor.service unit
        systemd_manager.StartUnit("co2monitor.service","replace")
        logger.info(_("started co2monitor via systemd's dbus interface."))
    except: # systemd starting didn't work
        logger.debug(_("starting co2monitor via systemd's dbus interface didn't work."))
        # last resort: start co2monitor service by hand
        logger.info(_("starting co2monitor via 'at now'..."))
        # open "at now" process
        atnow = Popen(["at","now"],stdin=PIPE,stdout=PIPE,stderr=PIPE)
        # put text into 'at now' command
        atnow.communicate(input = b'/usr/bin/co2monitor-service')

        # check if starting worked out
        signal.alarm(10) # give it some seconds to register on dbus
        while not systembus.name_has_owner(CO2MONITOR_BUSNAME):
            timeleft = signal.alarm(0) # get alarm time left
            if timeleft <= 1: # if alarm is nearly reached, stop
                logger.info(_("co2monitor startup took too long via 'at now', didn't work."))
                sys.exit() # exit
            signal.alarm(timeleft) # continue alarm
            time.sleep(1.1) # has to sleep more than 1 second, because
                            # signal.alarm only returns full seconds
        signal.alarm(0) # unset the alarm
        logger.info(_("co2monitor successfully started via 'at now'."))


    

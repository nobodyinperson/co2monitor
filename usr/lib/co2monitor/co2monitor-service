#!/usr/bin/env python3
import logging
import configparser
import sys, os, glob

# add /usr/lib/co2monitor to the module paths
sys.path.insert(1,os.path.join(os.path.dirname(os.path.realpath(__file__)),
    '/usr/lib/co2monitor'))

# import co2 device interface
import co2device

# logger
logger = logging.getLogger(__name__)

##########################
### monitoring service ###
##########################
class co2monitorService(object):
    def __init__(self):
        # read config
        configfiles = glob.glob("/etc/co2monitor/*")
        self.config = configparser.ConfigParser()
        self.config.read(configfiles)

        # initialize logging
        # set loglevel possiblities
        loglevels = {
            'debug'   :logging.DEBUG,
            'info'    :logging.INFO,
            'warning' :logging.WARNING,
            'error'   :logging.ERROR,
            'critical':logging.CRITICAL
            }

        # set up logging with loglevel from config
        loglevel = loglevels.get(self.config.get('service-logging','loglevel'),
                                 logging.WARNING)
        logfile = self.config.get('service-logging','logfile')
        if logfile is None: # if no logfile was specified
            logfile = "/var/log/co2monitor.log"

        logging.basicConfig(
            filename=logfile, level=loglevel,
            format="%(asctime)s [%(levelname)s] %(module)s: %(message)s",
            datefmt="%H:%M:%S"
            )

        # no logging wanted
        if not self.config.getboolean('service-logging','logging'): 
            logger.propagate = False # switch off logging
            
    # set up the device
    def setup_device(self, device):
        self.device = co2device.co2device(device)



### main program ###
if __name__ == "__main__":
    # run the service
    service = co2monitorService()
    logger.info("co2monitor started!")

    # the device file
    device = os.environ.get('DEVNAME', None)
    if device is None:
        logger.critical('No DEVNAME environment variable. Aborting.')
        sys.exit(1)
    else:
        service.setup_device(device)

    while True:
        logger.info(service.device.read())
